<?phpnamespace App\Model;class News extends BaseModel{    public function getNews(){        $news = $this->database->table(DatabaseStructure::NEWS)->order('id DESC')->fetchAll();        $news = $this->getArrayFromActiveRow($news);        for($i=0; $i<count($news); $i++){            $news[$i]['authorName'] = $this->database->table(DatabaseStructure::USERS)->where('id', $news[$i]['author'])->fetch()['username'];        }        return $news;    }        public function getPinnedNews(){        $news = $this->database->table(DatabaseStructure::NEWS)->where('important', 1)->where('approved', 1)->order('id DESC')->fetchAll();        $news = $this->getArrayFromActiveRow($news);        for($i=0; $i<count($news); $i++){            $news[$i]['authorName'] = $this->database->table(DatabaseStructure::USERS)->where('id', $news[$i]['author'])->fetch()['username'];        }        return $news;    }        public function getUnPinnedNews(){        $news = $this->database->table(DatabaseStructure::NEWS)->where('important', 0)->where('approved', 1)->order('id DESC')->fetchAll();        $news = $this->getArrayFromActiveRow($news);        for($i=0; $i<count($news); $i++){            $news[$i]['authorName'] = $this->database->table(DatabaseStructure::USERS)->where('id', $news[$i]['author'])->fetch()['username'];        }        return $news;    }        public function getUnPinnedNewsForPaginator($length, $offset){        $news = $this->database->table(DatabaseStructure::NEWS)->where('important', 0)->where('approved', 1)->order('id DESC')->limit($length, $offset)->fetchAll();        $news = $this->getArrayFromActiveRow($news);        for($i=0; $i<count($news); $i++){            $news[$i]['authorName'] = $this->database->table(DatabaseStructure::USERS)->where('id', $news[$i]['author'])->fetch()['username'];        }        return $news;    }        public function getUnapprovedNews(){        $news = $this->database->table(DatabaseStructure::NEWS)->where('approved', 0)->order('id DESC')->fetchAll();        $news = $this->getArrayFromActiveRow($news);        for($i=0; $i<count($news); $i++){            $news[$i]['authorName'] = $this->database->table(DatabaseStructure::USERS)->where('id', $news[$i]['author'])->fetch()['username'];        }        return $news;    }        public function getApprovedNews(){        $news = $this->database->table(DatabaseStructure::NEWS)->where('approved', 1)->order('id DESC')->fetchAll();        $news = $this->getArrayFromActiveRow($news);        for($i=0; $i<count($news); $i++){            $news[$i]['authorName'] = $this->database->table(DatabaseStructure::USERS)->where('id', $news[$i]['author'])->fetch()['username'];        }        return $news;    }        public function getSingleNews($newsId){        return $this->database->table(DatabaseStructure::NEWS)->where('id', $newsId)->fetch();    }        public function addNews($values, $userId, $basePath){        if($values['newsPicture']->getSize() != null && $values['newsPicture']->getSize() <= 1024000){            $ending = pathinfo($values['newsPicture']->getName(), PATHINFO_EXTENSION);            $stockFileName = pathinfo($values['newsPicture']->getName(), PATHINFO_FILENAME);            $fileName = $stockFileName . \Nette\Utils\Strings::random() . '.' . $ending;            $fileUrl = $basePath . '/images/upload/news/' . $fileName;            $values['newsPicture']->move($fileUrl);        } else{            $fileName = '';        }		        $insertedNews = $this->database->table(DatabaseStructure::NEWS)->insert(array(            'title' => $values['title'],            'content' => $values['content'],            'important' => $values['important'] == true ? 1 : 0,            'author' => $userId,            'approved' => 0,            'imageUrl' => $fileName        ));		        $pictures = $values['pictures'];        if(count($pictures) >= 1){                foreach($pictures as $row){                        $_ending = pathinfo($row->getName(), PATHINFO_EXTENSION);                        $_stockFileName = pathinfo($row->getName(), PATHINFO_FILENAME);                        $_fileName = $_stockFileName . \Nette\Utils\Strings::random() . '.' . $_ending;                        $_fileUrl = $basePath . '/images/upload/news/' . $_fileName;                        $row->move($_fileUrl);                        $this->database->table(DatabaseStructure::NEWS_PICTURES)->insert(array(                                'newsId' => $insertedNews['id'],                                'imageUrl' => $_fileName                        ));                }        }		    }        public function editNews($newsId, $values){        $datetime = new \Nette\Utils\DateTime;                $this->database->table(DatabaseStructure::NEWS)->where('id', $newsId)->update(array(            'title' => $values->title,            'content' => $values->content,            'important' => $values['important'] == true ? 1 : 0,            'date' => date('Y-m-d H:i:s', $datetime->getTimestamp())        ));    }        public function editationExists($newsId){        if($this->database->table(DatabaseStructure::NEWS_EDIT)->where('newsId', $newsId)->fetch()){            return true;        } else{            return false;        }    }        public function approveChanges($newsId){        $newValues = $this->database->table(DatabaseStructure::NEWS_EDIT)->where('newsId', $newsId)->fetch();                $this->database->table(DatabaseStructure::NEWS)->where('id', $newsId)->update(array(            'title' => $newValues['title'],            'content' => $newValues['content'],            'important' => $newValues['important'],            'date' => $newValues['date']        ));        $this->database->table(DatabaseStructure::NEWS_EDIT)->where('newsId', $newsId)->delete();    }        public function saveNewsEditation($newsId, $values, $userId){           if($this->editationExists($newsId)){            $this->database->table(DatabaseStructure::NEWS_EDIT)->where('newsId', $newsId)->update(array(                'title' => $values['title'],                'content' => $values['content'],                'important' => $values['important'] == true ? 1 : 0,                'author' => $userId            ));        } else{            $this->database->table(DatabaseStructure::NEWS_EDIT)->insert(array(                'newsId' => $newsId,                'title' => $values['title'],                'content' => $values['content'],                'important' => $values['important'] == true ? 1 : 0,                'author' => $userId            ));        }    }        public function getNewsEditations(){        $news = $this->database->table(DatabaseStructure::NEWS_EDIT)->order('id DESC')->fetchAll();        $news = $this->getArrayFromActiveRow($news);        for($i=0; $i<count($news); $i++){            $news[$i]['authorName'] = $this->database->table(DatabaseStructure::USERS)->where('id', $news[$i]['author'])->fetch()['username'];        }        return $news;    }        public function getNewsEditation($newsId){        return $this->database->table(DatabaseStructure::NEWS_EDIT)->where('newsId', $newsId)->fetch();    }        public function deleteNews($newsId, $basePath){        $news = $this->getSingleNews($newsId);                if($news['imageUrl'] != ''){                unlink($basePath . '/images/upload/news/' . $news['imageUrl']);        }	        $additional = $this->database->table(DatabaseStructure::NEWS_PICTURES)->where('newsId', $newsId)->fetchAll();        if(count($additional) >= 1){            foreach($additional as $image){                unlink($basePath . '/images/upload/news/' . $image['imageUrl']);                $this->database->table(DatabaseStructure::NEWS_PICTURES)->where('id', $image['id'])->delete();            }        }                $this->database->table(DatabaseStructure::NEWS)->where('id', $newsId)->delete();    }        public function approveNews($newsId){        $this->database->table(DatabaseStructure::NEWS)->where('id', $newsId)->update(array(            'approved' => 1        ));    }        public function unApproveNews($newsId){        $this->database->table(DatabaseStructure::NEWS)->where('id', $newsId)->update(array(            'approved' => 0        ));    }    public function getAdditionalImages($newsId){        return $this->database->table(DatabaseStructure::NEWS_PICTURES)->where('newsId', $newsId)->fetchAll();    }}